{"version":3,"sources":["firebase.js","components/login/login.js","components/register/RegisterForm.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","withRouter","history","useContext","UserContext","isAuth","setIsAuth","initialFields","username","password","useState","values","setValues","handleInputChange","e","target","name","value","handleUserLogin","a","preventDefault","collection","where","get","querySnapshot","empty","alert","push","console","error","autoComplete","onSubmit","htmlFor","onChange","required","type","setUserId","addUser","addUserToDB","userObj","add","id","onClick","className"],"mappings":"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","file":"static/js/6.fc7cab18.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCw_nFjxtWvJ_mv9BrYljIt-YSNwg6Wk7Q\",\n  authDomain: \"react-app-9336c.firebaseapp.com\",\n  databaseURL: \"https://react-app-9336c-default-rtdb.firebaseio.com\",\n  projectId: \"react-app-9336c\",\n  storageBucket: \"react-app-9336c.appspot.com\",\n  messagingSenderId: \"782715162088\",\n  appId: \"1:782715162088:web:2b24e1829504fa1dfba85d\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nexport { db };\n","import React, { useContext, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { db } from \"../../firebase\";\n\nimport { UserContext } from \"../auth/UserContext\";\n\nconst Login = ({ history }) => {\n  const { isAuth, setIsAuth } = useContext(UserContext);\n\n  const initialFields = {\n    username: \"\",\n    password: \"\",\n  };\n  const [values, setValues] = useState(initialFields);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n  const handleUserLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      const querySnapshot = await db\n        .collection(\"users\")\n        .where(\"username\", \"==\", values.username)\n        .where(\"password\", \"==\", values.password)\n        .get();\n\n      const existingUser = querySnapshot.empty; // Will be false or existing user\n\n      if (!existingUser) {\n        // querySnapshot.forEach(function (doc) {\n        //   console.log(\"User Found:--\", doc.data());\n        //   if (doc.exists) {\n        //     setValues(initialFields);\n        //     setIsAuth(() => {\n        //       history.push(\"/profile\");\n        //       return true;\n        //     });\n        //   }\n        // });\n        setIsAuth(!isAuth);\n        history.push(\"/profile\");\n      } else {\n        alert(\"User Not found\");\n        setValues(initialFields);\n      }\n    } catch (error) {\n      console.error(\"ERR on Login:-\", error);\n    }\n  };\n  return (\n    <div>\n      <h5>Login </h5>\n      <form autoComplete=\"off\" onSubmit={handleUserLogin}>\n        <label htmlFor=\"username\">User Name:</label>\n        <br />\n        <input\n          value={values.username}\n          name=\"username\"\n          onChange={handleInputChange}\n          required\n        />\n        <br />\n        <label htmlFor=\"password\">Password:</label>\n        <br />\n        <input\n          type=\"text\"\n          value={values.password}\n          name=\"password\"\n          required\n          onChange={handleInputChange}\n        />\n        <br />\n        <br />\n        <input type=\"submit\" value=\"Log In\" />\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(Login);\n","import React, { useState, useContext } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { db } from \"../../firebase\";\n\nimport Login from \"../login/login\";\nimport { UserContext } from \"../auth/UserContext\";\n\nconst RegisterForm = ({ history }) => {\n  const { isAuth, setIsAuth } = useContext(UserContext);\n\n  const initialFields = {\n    username: \"\",\n    password: \"\",\n  };\n  const [values, setValues] = useState(initialFields);\n  const [userId, setUserId] = useState(null);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const addUser = async (e) => {\n    e.preventDefault();\n\n    const querySnapshot = await db\n      .collection(\"users\")\n      .where(\"username\", \"==\", values.username)\n      .get();\n\n    const isNewUser = querySnapshot.empty; // empty will be true, if no record exists in DB\n\n    if (isNewUser) {\n      addUserToDB({\n        username: values.username,\n        password: values.password,\n      });\n    } else {\n      alert(\"Seems to be an exising user, Please Login!\");\n      setValues(initialFields);\n    }\n  };\n\n  async function addUserToDB(userObj) {\n    const { id } = await db.collection(\"users\").add(userObj);\n\n    // Use the Users Id Generated by Firebase in Context, To use it accross all the components\n    setUserId(id);\n    setValues(initialFields);\n    setIsAuth(() => {\n      history.push(\"/profile\");\n      return true;\n    });\n  }\n\n  const handleLogout = () => setIsAuth(!isAuth);\n\n  return (\n    <>\n      {isAuth ? (\n        <>\n          <p>Welcome, User</p>\n          <button onClick={handleLogout}>Logout</button>\n        </>\n      ) : (\n        <div className=\"signin__wrapper\">\n          <div>\n            <h5>Register </h5>\n            <form autoComplete=\"off\" onSubmit={addUser}>\n              <label htmlFor=\"username\">User Name:</label>\n              <br />\n              <input\n                value={values.username}\n                name=\"username\"\n                onChange={handleInputChange}\n                required\n              />\n              <br />\n              <label htmlFor=\"password\">Password:</label>\n              <br />\n              <input\n                type=\"text\"\n                value={values.password}\n                name=\"password\"\n                required\n                onChange={handleInputChange}\n              />\n              <br />\n              <br />\n              <input type=\"submit\" value=\"Register\" />\n            </form>\n          </div>\n          <Login />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(RegisterForm);\n"],"sourceRoot":""}